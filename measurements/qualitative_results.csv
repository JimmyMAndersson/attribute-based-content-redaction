Timestamp,GraphQLExperience,AccessControlExperience,Q1,Q1Effort,Q1Comment,Q2,Q2Effort,Q2Comment,Q3_1,Q3_1Effort,Q3_2,Q3_2Effort,Q3Comment,UsefulInOwnWork,Benefits,Improvements
2022/04/25 11:10:18,5,4,No,1,,No,1,,Yes,1,partial,1,"Using null values for redacted data will make it hard to use in schemas where null values are not allowed, or force schemas to always allow null values. ",2,,"Don't use null for redacted data, it impedes schema design flexibility. It will need to support both schema-first and code-first implementation, or it won't get used. "
2022/04/25 15:58:52,2,5,No,3,,Yes,2,,Yes,2,partial,2,,4,,
2022/04/26 09:00:11,5,3,No,3,,Yes,3,,Yes,3,partial,3,,4,"It is certainly a good way to implement AuthZ in graphql, and I have just similar solutions before. The collection strategy is new to me though I believe and seems useful. Not sure how often one needs to use object data for a rule, but there may be some use cases I haven't thought of for that.","In the gox federated graph, a library called type-graphql is used, using that, this solution could be implemented as a custom decorator, or possibly directives. 

In regards to the solution itself, hard to think of specific improvements. Not to say that the solution is perfect, just that it needs to be tested with some real use case."
2022/04/27 11:15:56,2,4,No,2,,Yes,2,,Yes,2,partial,2,,2,This is a compelling pattern for 'whitelisting' data access and will come naturally to developers already working with GraphQL.,"The reason I dont think it would be helpful in my work is that while it is a pleasant format for access policy NOTATION it does not help with the really difficult things in access-control which are:

Context gathering - example such as 'user.department' or 'user.group' are really nice but often the authorization context is much more complex and deep (for e.g. a regional manager should be able to access bookings from any retailer in their assigned regions). This implies either a dynamic fetching of the these relationships at authorization time or a significant and costly denormalization of all the properties that MAY be significant for authorization across your entire object chain. Whatever notation style you used to express your static access rules has little impact here.

Dynamic rules - both in terms of things like 'temporary state based access' (say user A should be able to access Resource B for just as long as he is assigned to active task C) or in terms of 'user A is being given access to resource B now but we need to able to revoke this access at some arbitrary point later'. Both of these kinds of scenarios are actual use-cases in our system.

I think that trying to address these concerns at least from a conceptual perspective can end up making this much more useful"
2022/04/29 13:59:42,2,2,No,1,,Yes,1,,Yes,1,partial,1,,4,We can definitely look at using this solution for applying rules on sensitive data.,
2022/04/29 16:05:39,1,3,No,2,,Yes,2,,Yes,2,full,2,,3,,